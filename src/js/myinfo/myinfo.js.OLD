// --- o --- UTILITY functions -START- --- o ---
	var ERROR = {id: 0, text: "ERROR"},
		WARNING = {id: 1, text: "WARNING"},
		INFO = {id: 2, text: "INFO"},
		DEBUG = {id: 3, text: "DEBUG"};
	var logLevel = 3;

	function log(level, txt) {
		if (level.id <= logLevel) {
			console.log(level.text + ": " + txt);
		}
	};

	function loadModules(modules, callback) {
		var numOfModules = modules.length;
		var itemsProcessed = 0;

		modules.forEach( function(element, index, array) {
			$.getScript(element.link, function(){
				itemsProcessed++;
				if (itemsProcessed === numOfModules) {
					callback();
				};
			});
		});
	};

	function loadJson(jsonFile, callback) {
		d3.json(jsonFile, function(error, data) {
			if (error) throw error;

			callback(data);
		});
	};

	function saveJson(jsonFile, data, callback) {
		//
	};

	function insertMenu() {
		// Insert viewSelector search field
			d3.select("#menu").append("div")
				.attr("id", "viewselector")
			;

			// ViewSelector kereső
				$("#viewselector").select2(
					{
						query: function(options) {
							//alert("query: "+JSON.stringify(options));
							var pageSize = 10;
							var startIndex = (options.page - 1) * pageSize;

							var views = config.getViews();
							var filteredData = [];
							for (var i=0; i < views.length; i++) {
								filteredData[i] = {id: i, text: views[i].title};
							};

							if (options.term && options.term.length > 0) {
								if (!options.context) {
									var term = options.term.toLowerCase();

									options.context = [];
									for (var i=0; i < views.length; i++) {
										if (views[i].title.toLowerCase().indexOf(term) !== -1) {
											options.context.push({ id: i, text: views[i].title	});
										};
									};
								};
								filteredData = options.context;
							};

							options.callback({
								context: filteredData,
								results: filteredData.slice(startIndex, startIndex + pageSize),
								more: (startIndex + pageSize) < filteredData.length
							});
						},
						placeholder: "Válaszd ki az aktuális View-t.",
						openOnEnter: false,
						formatNoMatches: function(term) {return "Nincs találat";},
						containerCssClass : "show-hide"
						/*,
						createSearchChoice : function(term, data) {
							if (layout_thebrain.datasetTmp.viewMode === "insert") {
								if ((data.length !== 1) || (term !== data[0].text)) {
									return { id: -1, text: term };
								};
							};
						}*/
					}
				);

			//attach ViewSelector listener
				$("#viewselector").on("select2-selecting", function(e) {
					// Init selected view
					// ToDo: ha volt korábbi akkor azt ki kéne pucolni.

					config.destroySelectedLayoutModule();

					config.setSelectedViewIndex(e.val);

					config.initSelectedLayoutModule( $(window).width(), $(window).outerHeight(true) - $("#menu").outerHeight(true) - $("#toolbar").outerHeight(true) - $("#statusbar").outerHeight(true) - 20);
					config.refreshSelectedLayoutModule();

					log(DEBUG, `SelectedViewIndex(${e.val})`);
				});
	};
// --- o --- UTILITY functions - END - --- o ---

// Globális változók, amik az import(ok) során elérhetővé válnak
	//var dataset;
	//var config;
	//var layout_thebrain;
	//var 

log(INFO, "Start");

log(INFO, "-- Loading core modules")
var coreModulesToBoLoadedFirst = [
	{link: "config.js"},
	{link: "dataset.js"}
];
loadModules(coreModulesToBoLoadedFirst, function() {
	log(DEBUG, `-- loadModules(${JSON.stringify(coreModulesToBoLoadedFirst)}) loaded`)

	loadJson("config.json", function(data) {
		config.setDatasetJson(data);
		log(INFO, "-- loadJson(config.json) loaded");
		log(DEBUG, "-- CONFIG="+JSON.stringify(config.dataset));

		insertMenu();

		loadJson("dataset.json", function(data) {
			dataset.setDatasetJson(data);
			log(INFO, "-- loadJson(dataset.json) loaded");
			log(DEBUG, "-- DATASET="+JSON.stringify(dataset.dataset));

			loadModules(config.getLayoutModules(), function() {
				log(INFO, `-- loadLayoutModules(${JSON.stringify(config.getLayoutModules())}) loaded`);

				//alert($(body).margin());

				config.initSelectedLayoutModule( $(window).width(), $(window).outerHeight(true) - $("#menu").outerHeight(true) - $("#toolbar").outerHeight(true) - $("#statusbar").outerHeight(true) - 20);
				config.refreshSelectedLayoutModule();

				$(window).resize(function()  {
					config.resizeSelectedLayoutModule( $(window).width(), $(window).outerHeight(true) - $("#menu").outerHeight(true) - $("#toolbar").outerHeight(true) - $("#statusbar").outerHeight(true) - 20);
				});

				log(INFO, "Asyncron Finish");
			});
		});
	});
});

log(INFO, "Finish");
